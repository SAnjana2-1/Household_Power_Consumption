# -*- coding: utf-8 -*-
"""Multivariable Logistic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DOeemrgYoYCh4Zri8tYTXW7ngar_8nEN

# **Inserting or importing the data set**
"""

import pandas as pd
import warnings
warnings.filterwarnings('ignore')

file_path = '/content/household_power_consumption.txt'

# Load the data
df = pd.read_csv(file_path, sep=';', parse_dates={'Datetime': ['Date', 'Time']}, infer_datetime_format=True, low_memory=False)

print(df.head())

"""# **Pre-processing of dataset**"""

# Check for missing values
print(df.isnull().sum())

# Fill or drop missing values as needed
df = df.dropna()

df.replace('?', pd.NA, inplace=True)

# Drop rows with missing values
df.dropna(inplace=True)

# Convert data types if needed
df['Global_active_power'] = df['Global_active_power'].astype(float)
df['Global_reactive_power'] = df['Global_reactive_power'].astype(float)
df['Voltage'] = df['Voltage'].astype(float)
df['Global_intensity'] = df['Global_intensity'].astype(float)
df['Sub_metering_1'] = df['Sub_metering_1'].astype(float)
df['Sub_metering_2'] = df['Sub_metering_2'].astype(float)
df['Sub_metering_3'] = df['Sub_metering_3'].astype(float)

# Compute basic statistics
print(df[['Global_active_power', 'Global_reactive_power', 'Voltage', 'Global_intensity']].describe())

# Identify trends and patterns
df.set_index('Datetime', inplace=True)
print(df.resample('D').mean())

"""# **Multi variable logistic regression**

"""

!pip install scikit-learn
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
from sklearn.model_selection import cross_val_score

df=df1.head(12000000)
df['Global_active_power'] = pd.to_numeric(df['Global_active_power'], errors='coerce')
df['High_Power'] = (df['Global_active_power'] > 5).astype(int)

#(independent variables)
X = df[['Voltage', 'Global_reactive_power', 'Global_intensity']]
#(dependent variable)
y = df['High_Power']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Creating the Logistic Regression model
model = LogisticRegression()
# Training the model
model.fit(X_train, y_train)
# Making predictions on the test set
y_pred = model.predict(X_test)
# Evaluating the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print(f'score for test: {model.score(X_test,y_test)}')
print(f'score for train: {model.score(X_train,y_train)}')
print('Confusion Matrix:')
print(conf_matrix)
print('Classification Report:')
print(class_report)

plt.figure(figsize=(5, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('LogisticRegression - Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

scores = cross_val_score(model, X, y, cv=5)

"""# **cross validation for logistic regression**"""

# Print the cross-validation scores and their mean
print("Cross-validation scores:", scores)
print("Mean cross-validation score:", scores.mean())