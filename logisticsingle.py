# -*- coding: utf-8 -*-
"""Logisticsingle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vloMxo75XEtLD2c2wQKa1c15ZIwjfzD-

# **Inserting or importing the data set**
"""

import pandas as pd
import warnings
warnings.filterwarnings('ignore')

file_path = '/content/household_power_consumption.txt'

# Load the data
df = pd.read_csv(file_path, sep=';', parse_dates={'Datetime': ['Date', 'Time']}, infer_datetime_format=True, low_memory=False)

print(df.head())

"""# **Pre-processing of dataset**"""

# Check for missing values
print(df.isnull().sum())

# Fill or drop missing values as needed
df = df.dropna()

df.replace('?', pd.NA, inplace=True)

# Drop rows with missing values
df.dropna(inplace=True)

# Convert data types if needed
df['Global_active_power'] = df['Global_active_power'].astype(float)
df['Global_reactive_power'] = df['Global_reactive_power'].astype(float)
df['Voltage'] = df['Voltage'].astype(float)
df['Global_intensity'] = df['Global_intensity'].astype(float)
df['Sub_metering_1'] = df['Sub_metering_1'].astype(float)
df['Sub_metering_2'] = df['Sub_metering_2'].astype(float)
df['Sub_metering_3'] = df['Sub_metering_3'].astype(float)

# Compute basic statistics
print(df[['Global_active_power', 'Global_reactive_power', 'Voltage', 'Global_intensity']].describe())

# Identify trends and patterns
df.set_index('Datetime', inplace=True)
print(df.resample('D').mean())

"""# **logistic in single variable**

"""

from sklearn.preprocessing import StandardScaler
df['Global_active_power'] = df['Global_active_power'].astype(float)
median_consumption = df['Global_active_power'].median()
df['High_consumption'] = (df['Global_active_power'] > median_consumption).astype(int)

df.drop(['Global_active_power'], axis=1, inplace=True)

X = df.drop(['High_consumption', 'Datetime'], axis=1)
y = df['High_consumption']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

log_reg = LogisticRegression(random_state=42)
log_reg.fit(X_train_scaled, y_train)

import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, auc
import seaborn as sns

# Make predictions on the test set
y_pred = log_reg.predict(X_test_scaled)

# Calculate the accuracy score
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(f'score for test: {log_reg.score(X_test,y_test)}')
print(f'score for train: {log_reg.score(X_train,y_train)}')

# Generate a confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:')
print(conf_matrix)

# Plot the confusion matrix
plt.figure(figsize=(5, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

# Generate a classification report
class_report = classification_report(y_test, y_pred)
print('Classification Report:')
print(class_report)

cv_scores = cross_val_score(log_reg, X_train_scaled, y_train, cv=5)

# Print cross-validation results
print(f'Cross-validation scores: {cv_scores}')
print(f'Mean cross-validation score: {cv_scores.mean():.2f}')